#include <iostream>
#define MAX 100
using namespace std;


class queue_{
private:
    int capacity, front, back;
    char *queue;
    void doublecapacity();

public:
    queue_():capacity(5), front(0), back(0){
        queue = new char[capacity];
    }
    void push(char x);
    void pop();
    bool isempty();
    bool isfull();
    char getfront();
    char getback();
    int getsize();
    void show();
    //int getcapacity();
};

class stack_{
private:
    int top;
    int capacity;
    char *stack;
    void doublecapacity();
public:
    stack_():top(-1), capacity(10)
    {
        stack = new char[capacity];
    }
    void push(char x);
    void pop();
    bool isempty();
    char gettop();
    int getsize();
};

void queue_::doublecapacity()
{
    char *newqueue = new char[capacity*2];

    int j=front, size = getsize();

    for(int i=1; i<=size; i++)
    {
        newqueue[i] = queue[++j % capacity];
    }
    back = getsize();
    front = 0;
    capacity *= 2;
    delete [] queue;
    queue = newqueue;
}

void queue_::push(char x)
{
    if(isfull())
    {
        doublecapacity();
    }
    back = (back + 1)%capacity;
    queue[back] = x;
}

void queue_::pop()
{
    if(isempty())
    {
        cout<<"queue is empty"<<endl;
        return;
    }
    front = (front + 1)%capacity;
}

bool queue_::isempty()
{
    return (front == back);
}

bool queue_::isfull()
{
    return ((back+1)%capacity == front);
}

char queue_::getfront()
{
    if(isempty())
    {
        cout<<"queue is empty"<<endl;
        return 'l';
    }
    return queue[(front + 1)%capacity];
}

char queue_::getback()
{
    if(isempty())
    {
        cout<<"queue is empty"<<endl;
        return 'l';
    }
    return queue[back];
}

int queue_::getsize()
{
    int size;
    if(front<back)
    {
        size = back-front;
    }
    else
        size = capacity - (front-back);
    return size;
}

void printqueue(queue_ queue)
{
    cout<<"front: "<<queue.getfront()<<"    back: "<<queue.getback()<<endl;
    cout<<"number of elements: "<<queue.getsize()<<endl;
    cout<<endl;
}



void stack_::doublecapacity()
{
    capacity *= 2;
    char *newstack = new char[capacity];
    for(int i=0; i<capacity/2; i++)
    {
        newstack[i] = stack[i];
    }
    delete [] stack;
    stack = newstack;
}

void stack_::push(char x)
{
    if(top == capacity-1) doublecapacity();
    stack[++top] = x;
}
void stack_::pop()
{
    if(isempty())
    {
        cout<<"stack is empty"<<endl;
        return;
    }
    top--;
}

bool stack_::isempty()
{
    if(top == -1)
        return true;
    else
        return false;
}

char stack_::gettop()
{
    if(isempty())
    {
        cout<<"stack is empty"<<endl;
        return '!';
    }
    return stack[top];

}

int stack_::getsize()
{
    return top+1;
}

void dig(char **arr, int num);

void use(char **arr, int num);


int find_maxtop(int *mattop, int c)
{
    tmp = 0;
    for(int i=0; i<c; i++)
    {
        if(mattop[tmp]<=mattop[i])
            tmp = i;
    }
    return tmp;
}


void bomb(char **arr)
{

}

void flash(char **arr)
{

}

void mag(char **arr)
{

}

void lucky(char **arr)
{

}

void pig(char *arr)
{

}

int main()
{
    int c, r, n;

    string op;
    int num;
    char tmp;
    char **arr = new char *[r];
    cin>>c>>r>>n;
    int *mattop = new int [c];
    for(int i=0; i<r; i++)
        arr[i] = new char[c];
    for(int i=0; i<c; i++)
        mattop[i] = r;

    for(int i=0; i<r; i++)
    {
        for(int j=0; j<c; j++)
        {
            cin>>tmp;
            arr[i][j] = tmp;
        }
    }
    for(int i=0; i<r; i++)
    {
        for(int j=0; j<c; j++)
        {
            cout<<arr[i][j]<<" ";
        }
        cout<<endl;
    }

    while(n--)
    {
        cin >> op;
        if(op == "DIG")
        {
            cin>>num;
            dig(arr, num);
        }
        if(op == "USE")
        {
            use(arr, num);
        }

    }

    return 0;
}
